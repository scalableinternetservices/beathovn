# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  surveys: [Survey!]!
  survey (surveyId: Int!): Survey

  posts: [Post!]!

  # Who is this user following
  following (userId: Int!): [User!]!
  # Who follows this user
  followers (userId: Int!): [User!]!
}

type Mutation {
  # Records an answer to a survey question presented in class.
  answerSurvey (input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion (surveyId: Int!): Survey

  createPost (input: PostInput!): Post!

  createComment(input: CommentInput!): Comment!

  likePost (postId: Int!): Boolean

  followUser (input: FollowInput!): Boolean
}

type Subscription {
  surveyUpdates (surveyId: Int!): Survey
}

type User {
  id: Int!
  userType: UserType!
  email: String!
  name: String!
  likes: [Like!]!
  comments: [Comment!]!
  followers: [Following!]!
  following: [Following!]!
}

enum UserType { ADMIN, USER }

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

type Comment {
  id: Int!
  # timeCreated: Int!
  text: String!
  post: Post!
  user: User!
}

type Following {
  id: Int!
  # timeCreated: Int!
  follower: User!
  followee: User!
}

type Like {
  id: Int!
  # timeCreated: Int!
  post: Post!
  user: User!
}

type Post {
  id: Int!
  # timeCreated: Int!
  musicLink: String!
  commentary: String
  comments: [Comment!]!
  likes: [Like!]!
  user: User
}

input SurveyInput {
  questionId: Int!
  answer: String!
}

input PostInput {
  musicLink: String!
  commentary: String
}

input CommentInput {
  text: String!
  postId: Int!
}

input FollowInput {
  followerId: Int!
  followeeId: Int!
}

input PostCommentInput {
  postId: Int!
  limit: Int
  offset: Int
}